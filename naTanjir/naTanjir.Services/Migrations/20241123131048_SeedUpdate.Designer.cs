// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using naTanjir.Services.Database;

#nullable disable

namespace naTanjir.Services.Migrations
{
    [DbContext(typeof(NaTanjirContext))]
    [Migration("20241123131048_SeedUpdate")]
    partial class SeedUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("naTanjir.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RestoranId")
                        .HasColumnType("int")
                        .HasColumnName("RestoranID");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("KorisnikId")
                        .HasName("PK__Korisnic__80B06D6177EE62B8");

                    b.HasIndex("RestoranId");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "kupac@gmail.com",
                            Ime = "Kupac",
                            IsDeleted = false,
                            KorisnickoIme = "kupac",
                            LozinkaHash = "2pka8gGVbEqAsY4ijeBsTJehv9Y==",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 2,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "kupac2@gmail.com",
                            Ime = "Kupacdva",
                            IsDeleted = false,
                            KorisnickoIme = "kupac2",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 3,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "vlasnik@gmail.com",
                            Ime = "Vlasnik",
                            IsDeleted = false,
                            KorisnickoIme = "vlasnik",
                            LozinkaHash = "c1WzmHn/IfIrmkynZcsLyWHuzqE=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 4,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            Ime = "Admin",
                            IsDeleted = false,
                            KorisnickoIme = "admin",
                            LozinkaHash = "9MF7KTZlFft51eQvyTtlgmYQlOs=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 5,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "dostavljac@gmail.com",
                            Ime = "Dostavljac",
                            IsDeleted = false,
                            KorisnickoIme = "dostavljac",
                            LozinkaHash = "aK8cml17lpwbriKaVDWacJdixas=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 1,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 6,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "dostavljac2@gmail.com",
                            Ime = "Dostavljac",
                            IsDeleted = false,
                            KorisnickoIme = "dostavljac2",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 2,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 7,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "dostavljac2@gmail.com",
                            Ime = "Dostavljac",
                            IsDeleted = false,
                            KorisnickoIme = "dostavljac3",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 3,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 8,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "dostavljac2@gmail.com",
                            Ime = "Dostavljac",
                            IsDeleted = false,
                            KorisnickoIme = "dostavljac4",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 4,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 9,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "radnikrestorana@gmail.com",
                            Ime = "Radnikrestorana",
                            IsDeleted = false,
                            KorisnickoIme = "radnikrestorana",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 1,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 10,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "radnikrestorana@gmail.com",
                            Ime = "Radnikrestorana",
                            IsDeleted = false,
                            KorisnickoIme = "radnikrestorana2",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 2,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 11,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "radnikrestorana@gmail.com",
                            Ime = "Radnikrestorana",
                            IsDeleted = false,
                            KorisnickoIme = "radnikrestorana3",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 3,
                            Telefon = "+060303101"
                        },
                        new
                        {
                            KorisnikId = 12,
                            DatumRodjenja = new DateTime(2004, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "radnikrestorana@gmail.com",
                            Ime = "Radnikrestorana",
                            IsDeleted = false,
                            KorisnickoIme = "radnikrestorana4",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Tester",
                            RestoranId = 4,
                            Telefon = "+060303101"
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikUlogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("KorisnikUlogaId")
                        .HasName("PK__Korisnic__1608720E8E1E1CAC");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikUlogaId = 1,
                            IsDeleted = false,
                            KorisnikId = 1,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 2,
                            IsDeleted = false,
                            KorisnikId = 2,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 3,
                            IsDeleted = false,
                            KorisnikId = 3,
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikUlogaId = 4,
                            IsDeleted = false,
                            KorisnikId = 4,
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikUlogaId = 5,
                            IsDeleted = false,
                            KorisnikId = 5,
                            UlogaId = 4
                        },
                        new
                        {
                            KorisnikUlogaId = 6,
                            IsDeleted = false,
                            KorisnikId = 6,
                            UlogaId = 4
                        },
                        new
                        {
                            KorisnikUlogaId = 7,
                            IsDeleted = false,
                            KorisnikId = 7,
                            UlogaId = 4
                        },
                        new
                        {
                            KorisnikUlogaId = 8,
                            IsDeleted = false,
                            KorisnikId = 8,
                            UlogaId = 4
                        },
                        new
                        {
                            KorisnikUlogaId = 9,
                            IsDeleted = false,
                            KorisnikId = 9,
                            UlogaId = 5
                        },
                        new
                        {
                            KorisnikUlogaId = 10,
                            IsDeleted = false,
                            KorisnikId = 10,
                            UlogaId = 5
                        },
                        new
                        {
                            KorisnikUlogaId = 11,
                            IsDeleted = false,
                            KorisnikId = 11,
                            UlogaId = 5
                        },
                        new
                        {
                            KorisnikUlogaId = 12,
                            IsDeleted = false,
                            KorisnikId = 12,
                            UlogaId = 5
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.Lokacija", b =>
                {
                    b.Property<int>("LokacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LokacijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LokacijaId"));

                    b.Property<string>("Adresa")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("GeografskaDuzina")
                        .HasColumnType("decimal(18, 16)");

                    b.Property<decimal?>("GeografskaSirina")
                        .HasColumnType("decimal(18, 16)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("LokacijaId")
                        .HasName("PK__Lokacija__49DE2C2AF537B551");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Lokacija", (string)null);
                });

            modelBuilder.Entity("naTanjir.Services.Database.Narudzba", b =>
                {
                    b.Property<int>("NarudzbaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaId"));

                    b.Property<int>("BrojNarudzbe")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<int?>("DostavljacId")
                        .HasColumnType("int")
                        .HasColumnName("DostavljacID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("UkupnaCijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("NarudzbaId")
                        .HasName("PK__Narudzba__FBEC1357883C3095");

                    b.HasIndex("DostavljacId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Narudzba", (string)null);

                    b.HasData(
                        new
                        {
                            NarudzbaId = 1,
                            BrojNarudzbe = 4324,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            StateMachine = "kreirana",
                            UkupnaCijena = 24m
                        },
                        new
                        {
                            NarudzbaId = 2,
                            BrojNarudzbe = 3042,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            StateMachine = "kreirana",
                            UkupnaCijena = 16m
                        },
                        new
                        {
                            NarudzbaId = 3,
                            BrojNarudzbe = 3042,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            StateMachine = "kreirana",
                            UkupnaCijena = 10m
                        },
                        new
                        {
                            NarudzbaId = 4,
                            BrojNarudzbe = 1092,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            StateMachine = "kreirana",
                            UkupnaCijena = 18m
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.OcjenaProizvod", b =>
                {
                    b.Property<int>("OcjenaProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OcjenaProizvodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OcjenaProizvodId"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<decimal>("Ocjena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("OcjenaProizvodId")
                        .HasName("PK__OcjenaPr__B0C8530F9F9D1878");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("OcjenaProizvod", (string)null);

                    b.HasData(
                        new
                        {
                            OcjenaProizvodId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 4m,
                            ProizvodId = 1
                        },
                        new
                        {
                            OcjenaProizvodId = 2,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            ProizvodId = 2
                        },
                        new
                        {
                            OcjenaProizvodId = 3,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 4m,
                            ProizvodId = 3
                        },
                        new
                        {
                            OcjenaProizvodId = 4,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            ProizvodId = 7
                        },
                        new
                        {
                            OcjenaProizvodId = 5,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 5m,
                            ProizvodId = 8
                        },
                        new
                        {
                            OcjenaProizvodId = 6,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            ProizvodId = 9
                        },
                        new
                        {
                            OcjenaProizvodId = 7,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            ProizvodId = 13
                        },
                        new
                        {
                            OcjenaProizvodId = 8,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            ProizvodId = 14
                        },
                        new
                        {
                            OcjenaProizvodId = 9,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 4m,
                            ProizvodId = 15
                        },
                        new
                        {
                            OcjenaProizvodId = 10,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 4m,
                            ProizvodId = 19
                        },
                        new
                        {
                            OcjenaProizvodId = 11,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 2m,
                            ProizvodId = 20
                        },
                        new
                        {
                            OcjenaProizvodId = 12,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            ProizvodId = 21
                        },
                        new
                        {
                            OcjenaProizvodId = 13,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 4m,
                            ProizvodId = 4
                        },
                        new
                        {
                            OcjenaProizvodId = 14,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            ProizvodId = 5
                        },
                        new
                        {
                            OcjenaProizvodId = 15,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 4m,
                            ProizvodId = 6
                        },
                        new
                        {
                            OcjenaProizvodId = 16,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            ProizvodId = 10
                        },
                        new
                        {
                            OcjenaProizvodId = 17,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 5m,
                            ProizvodId = 11
                        },
                        new
                        {
                            OcjenaProizvodId = 18,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            ProizvodId = 12
                        },
                        new
                        {
                            OcjenaProizvodId = 19,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            ProizvodId = 16
                        },
                        new
                        {
                            OcjenaProizvodId = 20,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            ProizvodId = 17
                        },
                        new
                        {
                            OcjenaProizvodId = 21,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 4m,
                            ProizvodId = 18
                        },
                        new
                        {
                            OcjenaProizvodId = 22,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 4m,
                            ProizvodId = 22
                        },
                        new
                        {
                            OcjenaProizvodId = 23,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 2m,
                            ProizvodId = 23
                        },
                        new
                        {
                            OcjenaProizvodId = 24,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            ProizvodId = 24
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.OcjenaRestoran", b =>
                {
                    b.Property<int>("OcjenaRestoranId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OcjenaRestoranID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OcjenaRestoranId"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<decimal>("Ocjena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RestoranId")
                        .HasColumnType("int")
                        .HasColumnName("RestoranID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("OcjenaRestoranId")
                        .HasName("PK__OcjenaRe__993C51F773C6400A");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("RestoranId");

                    b.ToTable("OcjenaRestoran", (string)null);

                    b.HasData(
                        new
                        {
                            OcjenaRestoranId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 4m,
                            RestoranId = 1
                        },
                        new
                        {
                            OcjenaRestoranId = 2,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 5m,
                            RestoranId = 2
                        },
                        new
                        {
                            OcjenaRestoranId = 3,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            RestoranId = 3
                        },
                        new
                        {
                            OcjenaRestoranId = 4,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            Ocjena = 3m,
                            RestoranId = 4
                        },
                        new
                        {
                            OcjenaRestoranId = 5,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 5m,
                            RestoranId = 1
                        },
                        new
                        {
                            OcjenaRestoranId = 6,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 4m,
                            RestoranId = 2
                        },
                        new
                        {
                            OcjenaRestoranId = 7,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 3m,
                            RestoranId = 3
                        },
                        new
                        {
                            OcjenaRestoranId = 8,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            Ocjena = 2m,
                            RestoranId = 4
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.Proizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Opis")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("RestoranId")
                        .HasColumnType("int")
                        .HasColumnName("RestoranID");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.Property<int>("VrstaProizvodaId")
                        .HasColumnType("int")
                        .HasColumnName("VrstaProizvodaID");

                    b.HasKey("ProizvodId")
                        .HasName("PK__Proizvod__21A8BE181053462D");

                    b.HasIndex("RestoranId");

                    b.HasIndex("VrstaProizvodaId");

                    b.ToTable("Proizvod", (string)null);

                    b.HasData(
                        new
                        {
                            ProizvodId = 1,
                            Cijena = 12m,
                            IsDeleted = false,
                            Naziv = "Pizza Mexicana",
                            Opis = "Pizza Mexicana u restoranu Pizzeria Nerry predstavlja savršenu harmoniju meksičkih i italijanskih okusa.\nPripremljena na savršeno tankom, hrskavom tijestu, ova pizza je prekrivena bogatim umakom od paradajza\n, začinjenim mljevenim mesom, slatkim kukuruzom, crvenim grahom i hrskavim papričicama.\nJalapeño paprike dodaju dozu pikantnosti koja budi sva čula, dok se otopljeni\n sloj mozzarelle brine za savršenu kremastost svakog zalogaja.",
                            RestoranId = 1,
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 2,
                            Cijena = 12m,
                            IsDeleted = false,
                            Naziv = "Chicken Pizza",
                            Opis = "Chicken pizza je savršena kombinacija sočnih komadića piletine, topljenog sira i ukusnog tijesta.\nObogaćena mješavinom začina i svježim povrćem, poput paprike i luka,\n ova pizza nudi bogat i ukusan obrok idealan za ljubitelje piletine i klasičnih pizza okusa.",
                            RestoranId = 1,
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 3,
                            Cijena = 12m,
                            IsDeleted = false,
                            Naziv = "Pizza Margherita",
                            Opis = "Pizza Margherita je klasična italijanska pizza koja osvaja svojom jednostavnošću i savršenim balansom okusa.\nPriprema se od svježeg tijesta, premazana umakom od zrelih paradajza, posuta topljenim mozzarella sirom i aromatičnim listovima svježeg bosiljka.\nOvo jelo simbolizira autentičnost i tradiciju italijanske kuhinje.",
                            RestoranId = 1,
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 4,
                            Cijena = 11m,
                            IsDeleted = false,
                            Naziv = "Pizza capricciosa",
                            Opis = "Pizza Capricciosa je bogata i raznovrsna pizza koja spaja najukusnije sastojke.\nKlasično tijesto premazano je umakom od paradajza\n i posuto topljenim mozzarella sirom, uz dodatak šunke, svježih šampinjona, maslina i artičoka.\nSvaki zalogaj pruža savršenu harmoniju okusa, idealnu za ljubitelje bogatijih i tradicionalnih pizza.",
                            RestoranId = 1,
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 5,
                            Cijena = 10m,
                            IsDeleted = false,
                            Naziv = "Pizza Quattro Formaggi",
                            Opis = "Pizza Quattro Formaggi je pravi raj za ljubitelje sira. Priprema se na klasičnom tijestu\n, premazanom tankim slojem umaka od paradajza (ili bez njega, u bijeloj verziji) te obilno posutom kombinacijom\n četiri vrste sira: mozzarella, gorgonzola, parmezan i ricotta.\nSvaka vrsta sira doprinosi bogatstvu i kremastoj teksturi, stvarajući intenzivan i nezaboravan okus.",
                            RestoranId = 1,
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 6,
                            Cijena = 10m,
                            IsDeleted = false,
                            Naziv = "Pizza Diavola ",
                            Opis = "Pizza Diavola je prava poslastica za ljubitelje začinjenih jela. \nNa hrskavom tijestu nalazi se bogat sloj umaka od paradajza, topila mozzarella i obilje ljutih sastojaka poput pikantne salame,\n crvenih paprika i maslina. Ova pizza pruža savršen balans između ljutine i bogatog okusa,\n idealna za one koji vole uživati u intenzivnim i začinjenim jelima.",
                            RestoranId = 1,
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 7,
                            Cijena = 8m,
                            IsDeleted = false,
                            Naziv = "Burger Classic",
                            Opis = "Burger Classic je jednostavan, ali ukusan izbor za sve ljubitelje klasičnih burgera.\nSastoji se od sočne pljeskavice od mljevene govedine, koja je savršeno pečena i poslužen je u mekanom pecivu.\nDodaju se svježi sastojci poput zelene salate, rajčice, kiselih krastavaca i luka, te se sve začini s majonezom, senfom ili kečapom po želji.\nOvaj burger nudi savršen spoj okusa, s bogatim mesom i svježim povrćem, idealan za ljubitelje jednostavnih i kvalitetnih jela.",
                            RestoranId = 2,
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 8,
                            Cijena = 8m,
                            IsDeleted = false,
                            Naziv = "Cheeseburger",
                            Opis = "Cheeseburger je savršen izbor za ljubitelje sira. Sastoji se od sočne goveđe pljeskavice na kojoj se topi\n sloj rastopljenog cheddar sira. Uz to, u mekanom pecivu dolaze svježi krastavci, rajčica, zelena salata i luk,\n s dodatkom umaka po izboru (majoneza, kečap ili senf). Ovaj burger pruža bogatstvo okusa s kombinacijom sira, mesa i povrća,\n pružajući savršeno zadovoljstvo za svakog ljubitelja klasične kombinacije.",
                            RestoranId = 2,
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 9,
                            Cijena = 10m,
                            IsDeleted = false,
                            Naziv = "BBQ Burger",
                            Opis = "BBQ Burger je pravi izbor za ljubitelje dimljenih i slatko-ljutih okusa.\nSastoji se od sočne goveđe pljeskavice, na kojoj je sloj topljenog cheddar sira, a cijeli burger je premazan bogatim\nBBQ umakom koji mu daje specifičan dimljeni okus. Uz to, dodaju se kriške svježeg luka, kiselih krastavaca i hrskava slanina, sve u mekanom pecivu.\nOvaj burger nudi kombinaciju slatko-dimljenih okusa s hrskavim teksturama, idealan za sve koji uživaju u bogatim, intenzivnim jelima.",
                            RestoranId = 2,
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 10,
                            Cijena = 10m,
                            IsDeleted = false,
                            Naziv = "Mushroom Swiss Burger",
                            Opis = "Mushroom Swiss Burger je delikatan burger za ljubitelje gljiva i sira.\nSočna goveđa pljeskavica prekrivena je slojem rastopljenog švicarskog sira i pečenim gljivama,\n koje dodaju bogatstvo okusa i aromu.Uz to, dolaze svježi krastavci, rajčica i povrće po izboru, sve smješteno u mekanom pecivu.\nOvaj burger je savršen spoj umami okusa i svježih sastojaka, idealan za one koji traže sofisticiraniju verziju klasičnog burgera.",
                            RestoranId = 2,
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 11,
                            Cijena = 6m,
                            IsDeleted = false,
                            Naziv = "Club Sandwich",
                            Opis = "Club sandwich je klasični sendvič koji nudi savršen spoj okusa i tekstura.\nSastoji se od tri sloja svježeg bijelog kruha, svaki prepun bogatog nadeva od pečene piletine, hrskave slanine, svježih rajčica,\n zelene salate i majoneze. Ovaj sendvič nudi bogatstvo okusa, od sočne piletine i hrskave slanine do osvježavajuće salate i rajčica,\n sve to upotpunjeno kremastim majonezom. Savršen je izbor za sve koji žele uživati u klasičnom, ali ukusnom sendviču.",
                            RestoranId = 2,
                            VrstaProizvodaId = 3
                        },
                        new
                        {
                            ProizvodId = 12,
                            Cijena = 9m,
                            IsDeleted = false,
                            Naziv = "Tuna Salad Sandwich",
                            Opis = "Tuna salad sandwich je lagan i ukusan sendvič koji je savršen za ljubitelje tune. \nOvaj sendvič sadrži kremastu salatu od tune,\n pomiješanu s majonezom, senfom i začinima, uz svježe povrće poput luka, krastavaca i rajčica. Sve je smješteno između dva komada\n mekanog integralnog ili bijelog kruha. Ovaj sendvič nudi jednostavan, ali bogat okus, s savršenom ravnotežom\n između sočne tune i svježeg povrća.",
                            RestoranId = 2,
                            VrstaProizvodaId = 3
                        },
                        new
                        {
                            ProizvodId = 13,
                            Cijena = 4m,
                            IsDeleted = false,
                            Naziv = "Čokoladni Brownie",
                            Opis = "Brownie je sočan, gust i bogat čokoladni kolač, obično s komadićima tamne čokolade\n ili čokoladnim komadićima u tijestu. Njegova tekstura je između biskvita i fudgy smjese, s hrskavom koricom\n i sočnim srednjim dijelom. Savršen je za ljubitelje tamne čokolade.",
                            RestoranId = 3,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 14,
                            Cijena = 5m,
                            IsDeleted = false,
                            Naziv = "Vanilija Cupcake",
                            Opis = "Vanilija cupcake je lagani, mekani kolač s predivnim vanilija okusom. Obično je prekriven šarenom\n glazurom od maslaca, uz dodatak dekoracija poput šarenih mrvica ili jestivih cvjetova. Ovaj kolač je savršen\n za sve prigode, od rođendanskih zabava do opuštenih popodneva s prijateljima.",
                            RestoranId = 3,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 15,
                            Cijena = 5m,
                            IsDeleted = false,
                            Naziv = "Kolač od Limuna i Poppy Seeds (Mak)",
                            Opis = "Ovaj kolač nudi savršenu ravnotežu svježeg okusa limuna i blagih, hrskavih sjemenki maka.\nLagano je vlažan, a nježna tekstura čini ga savršenim za uživanje uz čaj ili kavu.\nSvježina limuna i mala količina maka daju ovom kolaču jedinstvenu aromu i boju.",
                            RestoranId = 3,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 16,
                            Cijena = 5m,
                            IsDeleted = false,
                            Naziv = "Palačinke sa Nutellom",
                            Opis = "Klasične tanke palačinke prekrivene bogatom Nutellom, čokoladnom kremom koja je omiljena među ljubiteljima slatkog.\nNutella se jednostavno nanosi na još tople palačinke, a često se dodaju i kesten pire, šlag ili komadići voća poput banana za dodatni okus.",
                            RestoranId = 3,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 17,
                            Cijena = 6m,
                            IsDeleted = false,
                            Naziv = "Palačinke sa Jagodama i Šlagom",
                            Opis = "Palačinke punjene svježim jagodama i prelivene šlagom. Ovaj jednostavan, ali ukusan desert donosi \nsavršenu ravnotežu između kiselkaste svježine jagoda i slatkog šlaga, stvarajući laganu\n i osvježavajuću poslasticu, idealnu za ljetne dane.",
                            RestoranId = 3,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 18,
                            Cijena = 6m,
                            IsDeleted = false,
                            Naziv = "Palačinke sa Nutellom i Banama",
                            Opis = "Jednostavne palačinke sa kremom od Nutelle, dodatno obogaćene svježim kolutićima banana.\nOva kombinacija čokolade i voća stvara savršen balans slatkog i voćnog okusa, a često se poslužuje\n i sa malo grčkog jogurta ili šlaga za kremastu teksturu.",
                            RestoranId = 3,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 19,
                            Cijena = 6m,
                            IsDeleted = false,
                            Naziv = "Quiche",
                            Opis = "Kremasti kolač od prhkog tijesta, obično punjen sa kombinacijom jaja, vrhnja, sira i povrća ili mesa.\n Popularni su quiche sa špinatom, slaninom ili gljivama.",
                            RestoranId = 4,
                            VrstaProizvodaId = 6
                        },
                        new
                        {
                            ProizvodId = 20,
                            Cijena = 6m,
                            IsDeleted = false,
                            Naziv = "Croque Monsieur",
                            Opis = "Francuski sendvič od toasta sa šunkom i sirom, preliven bešamel \nsosom i zapečen u pećnici do zlatne boje.",
                            RestoranId = 4,
                            VrstaProizvodaId = 3
                        },
                        new
                        {
                            ProizvodId = 21,
                            Cijena = 12m,
                            IsDeleted = false,
                            Naziv = "Ratatouille",
                            Opis = "Klasično francusko jelo od povrća (patlidžan, tikvice, paprika, paradajz i luk), kuhano sa maslinovim uljemn i začinskim biljem. Lagano, zdravo i puno okusa.",
                            RestoranId = 4,
                            VrstaProizvodaId = 15
                        },
                        new
                        {
                            ProizvodId = 22,
                            Cijena = 14m,
                            IsDeleted = false,
                            Naziv = "Steak Frites",
                            Opis = "Jednostavan, ali ukusan obrok: sočni odrezak (obično od goveđeg mesa) poslužuje se sa prženim pomfritima, često uz neki umak poput umaka od crnog vina ili beurre maître d'hôtel.",
                            RestoranId = 4,
                            VrstaProizvodaId = 8
                        },
                        new
                        {
                            ProizvodId = 23,
                            Cijena = 10m,
                            IsDeleted = false,
                            Naziv = "Salata Niçoise",
                            Opis = "Francuska salata koja uključuje paradajz, krastavce, crne masline, \nzelenu salatu i kuhane krumpire, obično začinjenu sa maslinovim uljem i balzamičnim octom.",
                            RestoranId = 4,
                            VrstaProizvodaId = 15
                        },
                        new
                        {
                            ProizvodId = 24,
                            Cijena = 12m,
                            IsDeleted = false,
                            Naziv = "Quiche Lorraine",
                            Opis = "Quiche Lorraine je klasično francusko jelo koje potiče iz Lorraine regije, a danas je \npopularno širom sveta. Osim pancete, u receptu se često mogu dodati i druge sastojke poput sira,\n luka ili povrća, zavisno od varijacije.",
                            RestoranId = 4,
                            VrstaProizvodaId = 18
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.Restoran", b =>
                {
                    b.Property<int>("RestoranId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RestoranID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestoranId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RadnoVrijemeDo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RadnoVrijemeOd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VlasnikId")
                        .HasColumnType("int")
                        .HasColumnName("VlasnikID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.Property<int>("VrstaRestoranaId")
                        .HasColumnType("int")
                        .HasColumnName("VrstaRestoranaID");

                    b.HasKey("RestoranId")
                        .HasName("PK__Restoran__259AB1A74431504F");

                    b.HasIndex("VlasnikId");

                    b.HasIndex("VrstaRestoranaId");

                    b.ToTable("Restoran", (string)null);

                    b.HasData(
                        new
                        {
                            RestoranId = 1,
                            IsDeleted = false,
                            Lokacija = "Branilaca Bosne bb, Blagaj",
                            Naziv = "Pizzeria Nerry",
                            RadnoVrijemeDo = "22:00",
                            RadnoVrijemeOd = "08:00",
                            VlasnikId = 3,
                            VrstaRestoranaId = 1
                        },
                        new
                        {
                            RestoranId = 2,
                            IsDeleted = false,
                            Lokacija = "Branilaca Bosne bb, Blagaj",
                            Naziv = "Restoran Čaršija",
                            RadnoVrijemeDo = "22:00",
                            RadnoVrijemeOd = "08:00",
                            VlasnikId = 3,
                            VrstaRestoranaId = 3
                        },
                        new
                        {
                            RestoranId = 3,
                            IsDeleted = false,
                            Lokacija = "Branilaca Bosne bb, Blagaj",
                            Naziv = "Slastičarna Ada",
                            RadnoVrijemeDo = "22:00",
                            RadnoVrijemeOd = "08:00",
                            VlasnikId = 3,
                            VrstaRestoranaId = 15
                        },
                        new
                        {
                            RestoranId = 4,
                            IsDeleted = false,
                            Lokacija = "Branilaca Bosne bb, Blagaj",
                            Naziv = "Restoran Royal",
                            RadnoVrijemeDo = "22:00",
                            RadnoVrijemeOd = "08:00",
                            VlasnikId = 3,
                            VrstaRestoranaId = 13
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.RestoranFavorit", b =>
                {
                    b.Property<int>("RestoranFavoritId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RestoranFavoritID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestoranFavoritId"));

                    b.Property<DateTime>("DatumDodavanja")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int>("RestoranId")
                        .HasColumnType("int")
                        .HasColumnName("RestoranID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("RestoranFavoritId")
                        .HasName("PK__Restoran__2953C4B456B4BC39");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("RestoranId");

                    b.ToTable("RestoranFavorit", (string)null);

                    b.HasData(
                        new
                        {
                            RestoranFavoritId = 1,
                            DatumDodavanja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            RestoranId = 1
                        },
                        new
                        {
                            RestoranFavoritId = 2,
                            DatumDodavanja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 1,
                            RestoranId = 2
                        },
                        new
                        {
                            RestoranFavoritId = 3,
                            DatumDodavanja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            RestoranId = 3
                        },
                        new
                        {
                            RestoranFavoritId = 4,
                            DatumDodavanja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            KorisnikId = 2,
                            RestoranId = 4
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.StavkeNarudzbe", b =>
                {
                    b.Property<int>("StavkeNarudzbeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StavkeNarudzbeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StavkeNarudzbeId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int?>("NarudzbaId")
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.Property<int>("RestoranId")
                        .HasColumnType("int")
                        .HasColumnName("RestoranID");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("StavkeNarudzbeId")
                        .HasName("PK__StavkeNa__FA672E98C956CF71");

                    b.HasIndex("NarudzbaId");

                    b.HasIndex("ProizvodId");

                    b.HasIndex("RestoranId");

                    b.ToTable("StavkeNarudzbe", (string)null);

                    b.HasData(
                        new
                        {
                            StavkeNarudzbeId = 1,
                            Cijena = 12m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 1,
                            RestoranId = 1
                        },
                        new
                        {
                            StavkeNarudzbeId = 2,
                            Cijena = 12m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 2,
                            RestoranId = 1
                        },
                        new
                        {
                            StavkeNarudzbeId = 3,
                            Cijena = 8m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 2,
                            ProizvodId = 7,
                            RestoranId = 2
                        },
                        new
                        {
                            StavkeNarudzbeId = 4,
                            Cijena = 8m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 2,
                            ProizvodId = 8,
                            RestoranId = 2
                        },
                        new
                        {
                            StavkeNarudzbeId = 5,
                            Cijena = 5m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 3,
                            ProizvodId = 14,
                            RestoranId = 3
                        },
                        new
                        {
                            StavkeNarudzbeId = 6,
                            Cijena = 5m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 3,
                            ProizvodId = 15,
                            RestoranId = 3
                        },
                        new
                        {
                            StavkeNarudzbeId = 7,
                            Cijena = 6m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 4,
                            ProizvodId = 20,
                            RestoranId = 4
                        },
                        new
                        {
                            StavkeNarudzbeId = 8,
                            Cijena = 12m,
                            IsDeleted = false,
                            Kolicina = 1,
                            NarudzbaId = 4,
                            ProizvodId = 21,
                            RestoranId = 4
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("UlogaId")
                        .HasName("PK__Uloge__DCAB23EB1F3E7E4E");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            IsDeleted = false,
                            Naziv = "Kupac"
                        },
                        new
                        {
                            UlogaId = 2,
                            IsDeleted = false,
                            Naziv = "Vlasnik"
                        },
                        new
                        {
                            UlogaId = 3,
                            IsDeleted = false,
                            Naziv = "Admin"
                        },
                        new
                        {
                            UlogaId = 4,
                            IsDeleted = false,
                            Naziv = "Dostavljac"
                        },
                        new
                        {
                            UlogaId = 5,
                            IsDeleted = false,
                            Naziv = "RadnikRestorana"
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.VrstaProizvodum", b =>
                {
                    b.Property<int>("VrstaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VrstaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("VrstaId")
                        .HasName("PK__VrstaPro__42CB8F0F6A7204B9");

                    b.ToTable("VrstaProizvoda");

                    b.HasData(
                        new
                        {
                            VrstaId = 1,
                            IsDeleted = false,
                            Naziv = "Pizza"
                        },
                        new
                        {
                            VrstaId = 2,
                            IsDeleted = false,
                            Naziv = "Burger"
                        },
                        new
                        {
                            VrstaId = 3,
                            IsDeleted = false,
                            Naziv = "Sendvić"
                        },
                        new
                        {
                            VrstaId = 4,
                            IsDeleted = false,
                            Naziv = "Tjestenina"
                        },
                        new
                        {
                            VrstaId = 5,
                            IsDeleted = false,
                            Naziv = "Salata"
                        },
                        new
                        {
                            VrstaId = 6,
                            IsDeleted = false,
                            Naziv = "Desert"
                        },
                        new
                        {
                            VrstaId = 7,
                            IsDeleted = false,
                            Naziv = "Pića"
                        },
                        new
                        {
                            VrstaId = 8,
                            IsDeleted = false,
                            Naziv = "Piletina i meso"
                        },
                        new
                        {
                            VrstaId = 9,
                            IsDeleted = false,
                            Naziv = "Sushi"
                        },
                        new
                        {
                            VrstaId = 10,
                            IsDeleted = false,
                            Naziv = "Tacos"
                        },
                        new
                        {
                            VrstaId = 11,
                            IsDeleted = false,
                            Naziv = "Burritos"
                        },
                        new
                        {
                            VrstaId = 12,
                            IsDeleted = false,
                            Naziv = "Kineska kuhinja"
                        },
                        new
                        {
                            VrstaId = 13,
                            IsDeleted = false,
                            Naziv = "Indijska kuhinja"
                        },
                        new
                        {
                            VrstaId = 14,
                            IsDeleted = false,
                            Naziv = "Morski plodovi"
                        },
                        new
                        {
                            VrstaId = 15,
                            IsDeleted = false,
                            Naziv = "Zdrava hrana"
                        },
                        new
                        {
                            VrstaId = 16,
                            IsDeleted = false,
                            Naziv = "Vafli"
                        },
                        new
                        {
                            VrstaId = 17,
                            IsDeleted = false,
                            Naziv = "Palaćinke"
                        },
                        new
                        {
                            VrstaId = 18,
                            IsDeleted = false,
                            Naziv = "Pita"
                        },
                        new
                        {
                            VrstaId = 19,
                            IsDeleted = false,
                            Naziv = "Peciva"
                        },
                        new
                        {
                            VrstaId = 20,
                            IsDeleted = false,
                            Naziv = "Kafa"
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.VrstaRestorana", b =>
                {
                    b.Property<int>("VrstaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VrstaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("date");

                    b.HasKey("VrstaId")
                        .HasName("PK__VrstaRes__42CB8F0FBB2B54F9");

                    b.ToTable("VrstaRestorana", (string)null);

                    b.HasData(
                        new
                        {
                            VrstaId = 1,
                            IsDeleted = false,
                            Naziv = "Pizzeria"
                        },
                        new
                        {
                            VrstaId = 2,
                            IsDeleted = false,
                            Naziv = "Italijanski restoran"
                        },
                        new
                        {
                            VrstaId = 3,
                            IsDeleted = false,
                            Naziv = "Fast food"
                        },
                        new
                        {
                            VrstaId = 4,
                            IsDeleted = false,
                            Naziv = "Buregžinica"
                        },
                        new
                        {
                            VrstaId = 5,
                            IsDeleted = false,
                            Naziv = "Grill bar"
                        },
                        new
                        {
                            VrstaId = 6,
                            IsDeleted = false,
                            Naziv = "Slastičarna"
                        },
                        new
                        {
                            VrstaId = 7,
                            IsDeleted = false,
                            Naziv = "Meksički restoran"
                        },
                        new
                        {
                            VrstaId = 8,
                            IsDeleted = false,
                            Naziv = "Indijski restoran"
                        },
                        new
                        {
                            VrstaId = 9,
                            IsDeleted = false,
                            Naziv = "Ćevapdžinica"
                        },
                        new
                        {
                            VrstaId = 10,
                            IsDeleted = false,
                            Naziv = "Palaćinkarnica"
                        },
                        new
                        {
                            VrstaId = 11,
                            IsDeleted = false,
                            Naziv = "Sushi bar"
                        },
                        new
                        {
                            VrstaId = 12,
                            IsDeleted = false,
                            Naziv = "Taco bar"
                        },
                        new
                        {
                            VrstaId = 13,
                            IsDeleted = false,
                            Naziv = "Bistro"
                        },
                        new
                        {
                            VrstaId = 14,
                            IsDeleted = false,
                            Naziv = "Tavern"
                        },
                        new
                        {
                            VrstaId = 15,
                            IsDeleted = false,
                            Naziv = "Kafić sa slasticama"
                        });
                });

            modelBuilder.Entity("naTanjir.Services.Database.Korisnici", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Restoran", "Restoran")
                        .WithMany("Korisnicis")
                        .HasForeignKey("RestoranId")
                        .HasConstraintName("FKKorisnici730368");

                    b.Navigation("Restoran");
                });

            modelBuilder.Entity("naTanjir.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKKorisniciU569655");

                    b.HasOne("naTanjir.Services.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FKKorisniciU863332");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Lokacija", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Lokacijas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FKLokacija556795");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Narudzba", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Dostavljac")
                        .WithMany("NarudzbaDostavljacs")
                        .HasForeignKey("DostavljacId")
                        .HasConstraintName("FKNarudzba82867");

                    b.HasOne("naTanjir.Services.Database.Korisnici", "Korisnik")
                        .WithMany("NarudzbaKorisniks")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKNarudzba980749");

                    b.Navigation("Dostavljac");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("naTanjir.Services.Database.OcjenaProizvod", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Korisnik")
                        .WithMany("OcjenaProizvods")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKOcjenaProi212843");

                    b.HasOne("naTanjir.Services.Database.Proizvod", "Proizvod")
                        .WithMany("OcjenaProizvods")
                        .HasForeignKey("ProizvodId")
                        .IsRequired()
                        .HasConstraintName("FKOcjenaProi294356");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("naTanjir.Services.Database.OcjenaRestoran", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Korisnik")
                        .WithMany("OcjenaRestorans")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKOcjenaRest861405");

                    b.HasOne("naTanjir.Services.Database.Restoran", "Restoran")
                        .WithMany("OcjenaRestorans")
                        .HasForeignKey("RestoranId")
                        .IsRequired()
                        .HasConstraintName("FKOcjenaRest897301");

                    b.Navigation("Korisnik");

                    b.Navigation("Restoran");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Proizvod", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Restoran", "Restoran")
                        .WithMany("Proizvods")
                        .HasForeignKey("RestoranId")
                        .IsRequired()
                        .HasConstraintName("FKProizvod765485");

                    b.HasOne("naTanjir.Services.Database.VrstaProizvodum", "VrstaProizvoda")
                        .WithMany("Proizvods")
                        .HasForeignKey("VrstaProizvodaId")
                        .IsRequired()
                        .HasConstraintName("FKProizvod214927");

                    b.Navigation("Restoran");

                    b.Navigation("VrstaProizvoda");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Restoran", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Vlasnik")
                        .WithMany("Restorans")
                        .HasForeignKey("VlasnikId")
                        .IsRequired()
                        .HasConstraintName("FKRestoran332334");

                    b.HasOne("naTanjir.Services.Database.VrstaRestorana", "VrstaRestorana")
                        .WithMany("Restorans")
                        .HasForeignKey("VrstaRestoranaId")
                        .IsRequired()
                        .HasConstraintName("FKRestoran645673");

                    b.Navigation("Vlasnik");

                    b.Navigation("VrstaRestorana");
                });

            modelBuilder.Entity("naTanjir.Services.Database.RestoranFavorit", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Korisnici", "Korisnik")
                        .WithMany("RestoranFavorits")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKRestoranFa643757");

                    b.HasOne("naTanjir.Services.Database.Restoran", "Restoran")
                        .WithMany("RestoranFavorits")
                        .HasForeignKey("RestoranId")
                        .IsRequired()
                        .HasConstraintName("FKRestoranFa114950");

                    b.Navigation("Korisnik");

                    b.Navigation("Restoran");
                });

            modelBuilder.Entity("naTanjir.Services.Database.StavkeNarudzbe", b =>
                {
                    b.HasOne("naTanjir.Services.Database.Narudzba", "Narudzba")
                        .WithMany("StavkeNarudzbes")
                        .HasForeignKey("NarudzbaId")
                        .HasConstraintName("FKStavkeNaru240217");

                    b.HasOne("naTanjir.Services.Database.Proizvod", "Proizvod")
                        .WithMany("StavkeNarudzbes")
                        .HasForeignKey("ProizvodId")
                        .IsRequired()
                        .HasConstraintName("FKStavkeNaru313239");

                    b.HasOne("naTanjir.Services.Database.Restoran", "Restoran")
                        .WithMany("StavkeNarudzbes")
                        .HasForeignKey("RestoranId")
                        .IsRequired()
                        .HasConstraintName("FKStavkeNaru909859");

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");

                    b.Navigation("Restoran");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Korisnici", b =>
                {
                    b.Navigation("KorisniciUloges");

                    b.Navigation("Lokacijas");

                    b.Navigation("NarudzbaDostavljacs");

                    b.Navigation("NarudzbaKorisniks");

                    b.Navigation("OcjenaProizvods");

                    b.Navigation("OcjenaRestorans");

                    b.Navigation("RestoranFavorits");

                    b.Navigation("Restorans");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Narudzba", b =>
                {
                    b.Navigation("StavkeNarudzbes");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Proizvod", b =>
                {
                    b.Navigation("OcjenaProizvods");

                    b.Navigation("StavkeNarudzbes");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Restoran", b =>
                {
                    b.Navigation("Korisnicis");

                    b.Navigation("OcjenaRestorans");

                    b.Navigation("Proizvods");

                    b.Navigation("RestoranFavorits");

                    b.Navigation("StavkeNarudzbes");
                });

            modelBuilder.Entity("naTanjir.Services.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloges");
                });

            modelBuilder.Entity("naTanjir.Services.Database.VrstaProizvodum", b =>
                {
                    b.Navigation("Proizvods");
                });

            modelBuilder.Entity("naTanjir.Services.Database.VrstaRestorana", b =>
                {
                    b.Navigation("Restorans");
                });
#pragma warning restore 612, 618
        }
    }
}
